#!/bin/bash
echo "Start NetFilter Setting....";

# 各種変数の設定
set_variables() {
	DATE_FILE="/etc/iptables/ip_list_date"
	DAL_FILE="/etc/iptables/ip_list"
	RULE_FILE="/etc/iptables/iptables.rule"
	DENY_IP_LIST_FILE="/etc/iptables/denyIpList.txt"
  IPURL="http://nami.jp/ipv4bycc/cidr.txt.gz"
  DATE_REMOTE=`wget -S --spider ${IPURL} 2>&1 | grep Last-Modified`
	DO_WGET=1
}

update_dalfile() {
	echo -n "check dal_file..." 1>&2
	if [ -e "${DAL_FILE}" ];
	then
		echo "exist"
		echo -n "check date_file..." 1>&2
		if [ -e "${DATE_FILE}" ];
		then
			echo "exist"
			DATE_LOCAL=`cat ${DATE_FILE}`
			echo -n "check update..." 1>&2
			echo `date +"%R %F"`
			echo "remote:${DATE_REMOTE}"
			echo "local :${DATE_LOCAL}"
			if [ "${DATE_REMOTE}" != "${DATE_LOCAL}" ];
			then
				echo "update"
			else
				echo "not update"
				DO_WGET=0
			fi
		else
			echo "not exist"
		fi
	else
		echo "not exist"
	fi
	
	if [ ${DO_WGET} = 1 ];
	then
		echo "${DATE_REMOTE}" > "${DATE_FILE}"
    wget -O "${DAL_FILE}".gz ${IPURL}
    gzip -d "${DAL_FILE}".gz 
	fi
}

drop_settings(){
	for cc in dummy <%= @drop_countries.join(' ') %>; do
    ADDRESSES=(`cat "${DAL_FILE}" | sed -n "s/^${cc}\t//p"`);
		for ADDRESS in ${ADDRESSES[@]}; do
			echo "-A INPUT -s ${ADDRESS} -j drop-country-${cc}"
		done
	done
}

accept_settings(){
  ADDRESSES=(`cat "${DAL_FILE}" | sed -n "s/^JP\t//p"`);
	for ADDRESS in ${ADDRESSES[@]} ; do
		echo "-A INPUT -s ${ADDRESS} -p tcp -m tcp --dport 22 --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -m hashlimit --hashlimit-name t_sshd --hashlimit 3/min --hashlimit-burst 3 -j ACCEPT"
	done
}

set_kernel_flags() {

	# TCP SYN Flood攻撃対策
	echo 1 > /proc/sys/net/ipv4/tcp_syncookies
	
	# Smurf攻撃対策
	# 送信元を偽装したブロードキャスト宛のpingによる攻撃への対策
	echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
	
	# ICMP Redirectパケットを破棄
	echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
	
	# Source-routedパケットの破棄
	echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
	
	# IP Spoofing攻撃対策
	echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
	
	# パケットの転送を有効にする
	echo 1 > /proc/sys/net/ipv4/ip_forward
}

generate_rule_file(){
	cat <<- EOC
		*nat
		:PREROUTING ACCEPT [0:0]
		:INPUT ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		:POSTROUTING ACCEPT [0:0]
		COMMIT
		*filter
		:INPUT DROP [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		:drop-cntry - [0:0]
		:fragment - [0:0]
		-A INPUT -f -j fragment
		-A INPUT -p icmp -j ACCEPT
		-A INPUT -i lo -j ACCEPT
		-A INPUT -s 127.0.0.1/32 -j ACCEPT
		<% if !@lan_net.nil? && @lan_net != '' %>
		-A INPUT -s <%= @lan_net %> -j ACCEPT
		<% end %>
		-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
	EOC
	drop_settings
	accept_settings
	cat <<- EOC
		-A INPUT -p tcp -m tcp --dport 22 --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j DROP
		<% @accept_ports.each do |port| %>
			-A INPUT -p tcp -m tcp --dport <%= port %> -j ACCEPT
		<% end %>
		-A INPUT -j LOG --log-prefix "[IPTABLES INPUT DROP] " --log-level 7
		-A drop-cntry -j LOG --log-prefix "[IPTABLES CONTRY DROP] " --log-level 7
		-A drop-cntry -j DROP
		-A fragment -j LOG --log-prefix "[IPTABLES fragment DROP] " --log-level 7
		-A fragment -j DROP
		COMMIT
		*mangle
		:PREROUTING ACCEPT [0:0]
		:INPUT ACCEPT [0:0]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [0:0]
		:POSTROUTING ACCEPT [0:0]
		COMMIT
	EOC
}

update() {
	set_kernel_flags
	echo "generate_rule_file"
	generate_rule_file > ${RULE_FILE}
	echo "iptables-restore"
	iptables-restore < ${RULE_FILE}
}

set_variables
update_dalfile
update

exit 0
